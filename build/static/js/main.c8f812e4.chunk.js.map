{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/User.js","components/TodoItem.js","components/TodoItemHandler.js","components/TodoList.js","components/TodoListHandler.js","App.js","serviceWorker.js","index.js"],"names":["REMOVE_ITEM","LOAD_DATA","DISPLAY","SORT","loadData","dispatch","type","data","forEach","item","request","XMLHttpRequest","open","concat","addEventListener","JSON","parse","response","todos","users","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","todoItem","value","tableRowItem","completed","user","find","id","userId","title","author","name","email","push","_iterator","Symbol","iterator","next","done","err","return","display","send","initialState","requested","User","props","react_default","a","createElement","href","TodoItem","key","components_User","onClick","removeItem","TodoItemHandler","connect","state","ownProps","removeClicked","TodoList","_this","this","itemsList","components_TodoItemHandler","className","e","sort","target","innerText","getData","React","Component","TodoListHandler","headerTitle","store","createStore","arguments","length","action","Object","objectSpread","filter","index","newItems","toConsumableArray","b","toLowerCase","localeCompare","applyMiddleware","thunk","App","es","components_TodoListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8f812e4.chunk.js","sourcesContent":["export const REMOVE_ITEM = 'remove_item';\r\nexport const LOAD_DATA = 'load_data';\r\nexport const DISPLAY = 'display';\r\nexport const SORT = 'sort';\r\n\r\nexport function removeClicked(id) {\r\n  return {\r\n    type: REMOVE_ITEM,\r\n    id\r\n  }\r\n}\r\n\r\nexport function loadData() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: LOAD_DATA\r\n    });\r\n    \r\n    const requests = ['todos', 'users'];\r\n    const data = {};\r\n    \r\n    requests.forEach((item) => {\r\n      const request = new XMLHttpRequest();\r\n      request.open('GET', `https://jsonplaceholder.typicode.com/${item}`);\r\n      request.addEventListener('load', () => {\r\n      data[item] = JSON.parse(request.response);\r\n        if (data.todos && data.users) {\r\n          const items = [];\r\n          for (const todoItem of data.todos) {\r\n            const tableRowItem = {};\r\n            tableRowItem.completed = todoItem.completed ? 'completed' : 'not completed'\r\n            const user = data.users.find(user => user.id === todoItem.userId);\r\n            tableRowItem.id = todoItem.id;\r\n            tableRowItem.title = todoItem.title;\r\n            tableRowItem.author = user.name;\r\n            tableRowItem.email = user.email;\r\n            items.push(tableRowItem);\r\n          }\r\n          dispatch(display(items));\r\n        }\r\n      });\r\n      request.send();\r\n    });\r\n  }\r\n}\r\n\r\nexport function display(data) {\r\n  return {\r\n    type: DISPLAY,\r\n    data\r\n  }\r\n}\r\n\r\nexport function sort(data) {\r\n  return {\r\n    type: SORT,\r\n    data\r\n  }\r\n}\r\n\r\n","import {REMOVE_ITEM, LOAD_DATA, DISPLAY, SORT} from './actions'\r\n\r\nconst initialState = {\r\n  items: null,\r\n  requested: false\r\n}\r\n\r\nexport function reducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case REMOVE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((item, index) => action.id !== item.id)\r\n      };\r\n    case LOAD_DATA: \r\n      return {\r\n      ...state,\r\n        requested: true\r\n    }\r\n    case DISPLAY:\r\n      return {\r\n        ...state,\r\n        items: action.data\r\n      };\r\n    case SORT:\r\n      let newItems = [...state.items];\r\n      \r\n      if (action.data === 'Title' || action.data === 'Author' || action.data === 'Completed') {\r\n        newItems.sort((a,b) => a[action.data.toLowerCase()].localeCompare(b[action.data.toLowerCase()]));\r\n      } else {\r\n        newItems.sort((a,b) => a.id - b.id);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        items: newItems\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\n\r\nfunction User(props) {\r\n  return(\r\n      <td><a href = {'mailto:' + props.email}>{props.name}</a></td>\r\n  )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport User from './User';\r\n\r\nfunction TodoItem(props) {\r\n  let key = 0;\r\n  key++;\r\n  return(\r\n    <tr key = {key}>\r\n      <td>{props.id}</td>\r\n      <td>{props.title}</td>\r\n      <User name = {props.author} email = {props.email}/>\r\n      <td>{props.completed}\r\n        <button onClick={() => props.removeItem(props.id)}>remove</button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default TodoItem;","import {connect} from 'react-redux';\r\nimport TodoItem from './TodoItem';\r\nimport {removeClicked} from \"../redux/actions\";\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return {\r\n    id: ownProps.item.id,\r\n    title: ownProps.item.title,\r\n    author: ownProps.item.author,\r\n    email: ownProps.item.email,\r\n    completed: ownProps.item.completed\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    removeItem: (id) => dispatch(removeClicked(id))\r\n  }\r\n}\r\n\r\nconst TodoItemHandler = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoItem);\r\n\r\nexport default TodoItemHandler;","import React from 'react';\r\nimport TodoItemHandler from './TodoItemHandler';\r\n\r\nclass TodoList extends React.Component {\r\n\r\n  render() {\r\n    if(this.props.requested) {\r\n      if (this.props.items) {\r\n        const itemsList = [];\r\n\r\n        for(let item of this.props.items) {\r\n          itemsList.push(<TodoItemHandler key={item.id} item={item}/>)\r\n        }\r\n        \r\n        return (\r\n          <table className='table'>\r\n            <thead>\r\n              <tr onClick = {(e) => this.props.sort(e.target.innerText)}>\r\n                <th>id</th>\r\n                <th>Title</th>\r\n                <th>Author</th>\r\n                <th>Completed</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {itemsList}\r\n            </tbody>\r\n          </table>\r\n         );\r\n      } else {\r\n        return 'Loading...'\r\n      }\r\n    } else {\r\n      return <button onClick={this.props.getData}>Load</button>\r\n    }\r\n  \r\n  }\r\n}\r\n\r\n  export default TodoList;","import {connect} from 'react-redux';\r\nimport {loadData, sort} from '../redux/actions';\r\nimport TodoList from './TodoList';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    items: state.items,\r\n    requested: state.requested\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getData: () => dispatch(loadData()),\r\n    sort: (headerTitle) => dispatch(sort(headerTitle))\r\n  }\r\n}\r\n\r\nconst TodoListHandler = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList);\r\n\r\nexport default TodoListHandler;","import React from 'react';\r\nimport {applyMiddleware, createStore} from 'redux';\r\nimport {reducer} from './redux/reducers';\r\nimport {Provider} from 'react-redux';\r\nimport TodoListHandler from './components/TodoListHandler';\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <TodoListHandler/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}